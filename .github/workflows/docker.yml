name: Docker

# This will run when:
# - when new code is pushed to main to push the tags
#   latest as well as version tags
# - when a pull request is created and updated  to make sure the
#   Dockerfile is still valid.
# To be able to push to dockerhub, this execpts the following
# secrets to be set in the project:
# - DOCKERHUB_USERNAME : username that can push to the org
# - DOCKERHUB_PASSWORD : password asscoaited with the username
on:
  push:
    branches:
      - main

  pull_request:

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - uses: actions/checkout@v3

      # calculate some variables that are used later
      - name: variable setup
        run: |
          if [ "${{ github.event.release.target_commitish }}" != "" ]; then
            BRANCH="${{ github.event.release.target_commitish }}"
          elif [[ $GITHUB_REF =~ pull ]]; then
            BRANCH="$(echo $GITHUB_REF | sed 's#refs/pull/\([0-9]*\)/merge#PR-\1#')"
          else
            BRANCH=${GITHUB_REF##*/}
          fi

          if [ "$BRANCH" == "main" ]; then
            version="$(awk '/^## / { print tolower($2) }' CHANGELOG.md | head -1)"
            tags="latest"
            oldversion=""
            while [ "${oldversion}" != "${version}" ]; do
              oldversion="${version}"
              tags="${tags} ${version}"
              version=${version%.*}
            done
            version="$(awk '/version = / { print $4 }' project/Build.scala | sed 's/"//g')"
          elif [ "$BRANCH" == "develop" ]; then
            version="develop"
            tags="develop"
          else
            version="test"
            tags="${BRANCH}"
          fi

          push_tags=""
          for tag in ${tags}; do
            push_tags="${push_tags}ncsa/checks:${tag},"
            push_tags="${push_tags}ghcr.io/${{ github.repository_owner }}/checks:${tag},"
          done
          push_tags="${push_tags%,*}"

          echo "BRANCH=${BRANCH}"
          echo "VERSION=${version}"
          echo "TAGS=${tags}"
          echo "PUSH_TAGS=${push_tags}"

          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "TAGS=${push_tags}" >> $GITHUB_ENV

      # setup docker build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Inspect Builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      # login to registries
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # build the docker images
      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: "linux/amd64,linux/arm64"
          cache-from: type=registry,ref=ncsa/checks-cache:${{ env.BRANCH }}
          cache-to: type=registry,ref=ncsa/checks-cache:${{ env.BRANCH }},mode=max
          tags: ${{ env.TAGS }}
          build-args: |
            VERSION=${{ env.VERSION }}
            GITSHA1=${{ github.sha  }}

      # update README at DockerHub
      - name: Docker Hub Description
        if: github.event_name == 'push' && env.BRANCH == 'main'
        uses: peter-evans/dockerhub-description@v2
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKERHUB_REPOSITORY: ncsa/checks
          README_FILEPATH: README.md
